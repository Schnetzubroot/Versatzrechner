<div
	id="3d-render-container"
	class="w-4/5 h-4/5 rounded-xl bg-gradient-to-b from-slate-100 to-blue-200"
>
</div>

<script>
	import { render } from 'react-dom';
	import * as THREE from 'three';

	// Setup
	const container = document.getElementById('3d-render-container');
	const form = document.getElementById('form');
	const wall = document.getElementById('wall') as HTMLInputElement;
	const floor = document.getElementById('floor') as HTMLInputElement;
	const direction = document.querySelectorAll(
		'input[name="chamfer-type[name]"]'
	)[0] as HTMLInputElement;

	function init() {
		console.log('init called');
		let width = container.clientWidth;
		let height = container.clientHeight;

		const scene = new THREE.Scene();
		//let camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);
		let camera = new THREE.OrthographicCamera(
			width / -2,
			width / 2,
			height / 2,
			height / -2,
			1,
			1000
		);
		camera.zoom = 25;
		camera.updateProjectionMatrix();

		const renderer = new THREE.WebGLRenderer({
			antialias: true,
			alpha: true,
		});

		renderer.setSize(width, height);
		container.appendChild(renderer.domElement);
		camera.position.z = 10;
		camera.position.y = 0;

		//materials
		const cuttingMaterial = new THREE.MeshLambertMaterial({
			color: 0xf5c020,
			emissive: 0x000000,
			emissiveIntensity: 1,
		});
		const shaftMaterial = new THREE.MeshPhongMaterial({
			color: 0x575653,
			opacity: 0.5,
			transparent: false,
		});

		// Mesh
		const translateX = Number(wall.value);
		const translateY = -Number(floor.value);
		// Cutting Geometry Mesh
		const cuttingGeometry = new THREE.LatheGeometry(
			[
				new THREE.Vector2(0, 0),
				new THREE.Vector2(2, 2),
				new THREE.Vector2(1, 3),
				new THREE.Vector2(0, 3),
			],
			30
		);
		const cuttingMesh = new THREE.Mesh(cuttingGeometry, cuttingMaterial);
		scene.add(cuttingMesh);

		// Shaft Geometry Mesh
		const shaftGeometry = new THREE.LatheGeometry(
			[
				new THREE.Vector2(1, 3),
				new THREE.Vector2(1, 16),
				new THREE.Vector2(0, 16),
			],
			30
		);
		const shaftMesh = new THREE.Mesh(shaftGeometry, shaftMaterial);
		scene.add(shaftMesh);

		// Box Mesh
		const box = new THREE.BoxGeometry(40, 40, 2);
		if (direction.value == 'VorwÃ¤rts') {
			box.translate(22 + translateX, -20 + translateY, -3);
		} else {
			box.translate(22 + translateX, 20 + translateY, -3);
		}
		const boxMesh = new THREE.Mesh(box, shaftMaterial);
		scene.add(boxMesh);

		// Light
		const light = new THREE.AmbientLight(0xaaaaaa);
		scene.add(light);
		const spotlight = new THREE.PointLight(0xffffff, 1);
		spotlight.position.set(4, 6, 8);
		scene.add(spotlight);

		//scene.add(cube);

		function animate() {
			requestAnimationFrame(animate);
			renderer.render(scene, camera);
		}
		animate();

		const handleWindowResize = () => {
			container.innerHTML = '';
			width = container.clientWidth + 1;
			height = container.clientHeight + 1;
			camera.aspect = width / height;
			camera.updateProjectionMatrix();
			renderer.setSize(width, height);
			renderer.domElement.classList.add('rounded-xl');
			container.appendChild(renderer.domElement);
		};

		window.addEventListener('resize', handleWindowResize, false);
		handleWindowResize();
	}

	form.addEventListener('updateSimulation', (e) => {
		init();
	});

	init();
</script>
